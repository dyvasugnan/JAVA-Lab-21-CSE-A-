import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class Login extends JFrame implements ActionListener{
	Container c;
	JButton rules, back;
	JTextField  tfname;
	public Login() {
		
		getContentPane().setBackground(Color.WHITE);
		setLayout(null);
		
		ImageIcon i1 = new ImageIcon("C:\\Users\\HP\\eclipse-workspace\\quizApplication\\src\\quiz\\application\\quizTime.jpg");
		JLabel image = new JLabel(i1);
		image.setBounds(0, 0, 600, 500);
		add(image);
		
		JLabel heading = new JLabel("Techiz");
		heading.setBounds(750, 60, 300, 45);
		heading.setFont(new Font("Viner Hand ITC" ,Font.BOLD, 45));
		heading.setForeground(Color.BLACK);
		add(heading);
		
		JLabel name = new JLabel("Enter your name");
		name.setBounds(810, 150, 300, 25);
		name.setFont(new Font("Mongolian Baiti",Font.BOLD, 18));
		add(name);
		
		tfname = new JTextField();
		tfname.setBounds(735, 200, 300, 25);
		tfname.setFont(new Font("Arial", Font.BOLD, 20));
		add(tfname);
		
		rules = new JButton("Rules");
		rules.setBounds(915, 270, 120, 25);
		rules.setBackground(Color.BLACK);
		rules.setForeground(Color.WHITE);
		rules.addActionListener(this);
		add(rules);
		
		back = new JButton("Back");
		back.setBounds(735, 270, 120, 25);
		back.setBackground(Color.BLACK);
		back.setForeground(Color.WHITE);
		back.addActionListener(this);
		add(back);
		
		setSize(1200, 500);
		setVisible(true);
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
	}

	public void actionPerformed(ActionEvent ae) {
		String s;
		if(ae.getSource() == rules) {
			s = tfname.getText();
			setVisible(false);
			new Rules(s);
		}
		else if(ae.getSource() == back) {
			setVisible(false);
		}
	}
	public static void main(String[] args) {
		new Login();

	}

}


///// RULES


import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class Rules extends JFrame implements ActionListener{
	String name;
	JButton back, start;
	public Rules(String name) {
		this.name = name;
		getContentPane().setBackground(Color.WHITE);
		setLayout(null);
		
		JLabel heading = new JLabel("Welcome "+name+" to Techiz");
		heading.setBounds(50, 20, 700, 30);
		heading.setFont(new Font("Viner Hand ITC" ,Font.BOLD, 25));
		heading.setForeground(Color.BLACK);
		add(heading);
		
		JLabel rules = new JLabel();
		rules.setBounds(20, 90, 700, 350);
		rules.setFont(new Font("Tahoma" ,Font.PLAIN, 16));
		rules.setText(
				"<html>"+ 
		                "1. You are trained to be a programmer and not a story teller, answer point to point" + "<br><br>" +
		                "2. Do not unnecessarily smile at the person sitting next to you, they may also not know the answer" + "<br><br>" +
		                "3. You may have lot of options in life but here all the questions are compulsory" + "<br><br>" +
		                "4. Crying is allowed but please do so quietly." + "<br><br>" +
		                "5. Only a fool asks and a wise answers (Be wise, not otherwise)" + "<br><br>" +
		                "6. Do not get nervous if your friend is answering more questions, may be he/she is doing Jai Mata Di" + "<br><br>" +
		                "7. Brace yourself, this paper is not for the faint hearted" + "<br><br>" +
		                "8. May you know more than what John Snow knows, Good Luck" + "<br><br>" +
		            "<html>"
				);
		
		rules.setForeground(Color.BLACK);
		add(rules);
		
		start = new JButton("Start");
		start.setBounds(400, 500, 100, 30);
		start.setBackground(Color.BLACK);
		start.setForeground(Color.WHITE);
		start.addActionListener(this);
		add(start);
		
		back = new JButton("Back");
		back.setBounds(200, 500, 100, 30);
		back.setBackground(Color.BLACK);
		back.setForeground(Color.WHITE);
		back.addActionListener(this);
		add(back);
		
		setSize(800, 650);
		setLocation(250, 50);
		setVisible(true);
	}

	public void actionPerformed(ActionEvent ae) {
		if(ae.getSource() == start) {
			setVisible(false);
			new Quiz(name);
		}
		else {
			setVisible(false);
			new Login();
		}
	}
	public static void main(String[] args) {
		new Rules("User");
	}
}

/////QUIZ

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;

public class Quiz extends JFrame implements ActionListener {

	String questions[][];	
	String[] answers ;
	String user_ans[] ;
	JButton next, submit, lifeline;
	JLabel qno, question;
	JRadioButton opt1, opt2, opt3, opt4;
	
	public static int timer = 60;
	public static int ans_given = 0;
	public static int count = 0, len = 0, score = 0;
	ButtonGroup groupOptions;
	String username;
	public Quiz(String username) {
		this.username = username;
		
		String path = "C:\\Users\\HP\\eclipse-workspace\\quizApplication\\src\\quiz\\application\\quiz.txt";
		String ans_path = "C:\\Users\\HP\\eclipse-workspace\\quizApplication\\src\\quiz\\application\\answers.txt.txt";
		
		TextFileTo2DArray tfa = new TextFileTo2DArray(path);
		DataToArrayConverter dca = new DataToArrayConverter();
		questions = tfa.quizArray;
		answers = dca.readDataFromFile(ans_path);
		len = questions.length;
		user_ans = new String[len];
		
		setBounds(0, 0, 1440, 850);
		getContentPane().setBackground(Color.LIGHT_GRAY);
		setLayout(null);
		
		ImageIcon i1 = new ImageIcon("C:\\Users\\HP\\eclipse-workspace\\quizApplication\\src\\quiz\\application\\Screenshot (77).png");
		JLabel image = new JLabel(i1);
		
		Image i2 = i1.getImage().getScaledInstance(1300, 350, Image.SCALE_DEFAULT);
		image.setBounds(0, 0, 1300, 300);
		//image.setBounds(score, len, count, ans_given);
		add(image);
		
		qno = new JLabel();
		qno.setBounds(100, 400, 50, 30);
		qno.setFont(new Font("Taboma", Font.PLAIN, 24));
		add(qno);
		
		question = new JLabel();
		question.setBounds(150, 400, 900, 30);
		question.setFont(new Font("Taboma", Font.PLAIN, 24));
		add(question);
		
		
		opt1 = new JRadioButton();
		opt1.setBounds(170, 470, 700, 30);
		opt1.setBackground(Color.WHITE);
		opt1.setFont(new Font("Dialog", Font.PLAIN,20));
		add(opt1);
		
		opt2 = new JRadioButton();
		opt2.setBounds(170, 510, 700, 30);
		opt2.setBackground(Color.WHITE);
		opt2.setFont(new Font("Dialog", Font.PLAIN,20));
		add(opt2);
		
		opt3 = new JRadioButton();
		opt3.setBounds(170, 550, 700, 30);
		opt3.setBackground(Color.WHITE);
		opt3.setFont(new Font("Dialog", Font.PLAIN,20));
		add(opt3);
		
		opt4= new JRadioButton();
		opt4.setBounds(170, 590, 700, 30);
		opt4.setBackground(Color.WHITE);
		opt4.setFont(new Font("Dialog", Font.PLAIN,20));
		add(opt4);
		
		groupOptions = new  ButtonGroup();
		groupOptions.add(opt1);
		groupOptions.add(opt2);
		groupOptions.add(opt3);
		groupOptions.add(opt4);
		
		next = new JButton("Next");
		next.setBounds(1100, 480, 200, 30);
		next.setFont(new Font("Tahoma", Font.PLAIN, 22));
		next.setBackground(Color.DARK_GRAY);
		next.setForeground(Color.WHITE);
		next.addActionListener(this);
		add(next);
		
		lifeline = new JButton("50-50 lifeline");
		lifeline.setBounds(1100, 530, 200, 30);
		lifeline.setFont(new Font("Tahoma", Font.PLAIN, 22));
		lifeline.setBackground(Color.DARK_GRAY);
		lifeline.setForeground(Color.WHITE);
		lifeline.addActionListener(this);
		add(lifeline);
		
		submit = new JButton("Submit");
		submit.setBounds(1100, 580, 200, 30);
		submit.setFont(new Font("Tahoma", Font.PLAIN, 22));
		submit.setBackground(Color.DARK_GRAY);
		submit.setForeground(Color.WHITE);
		submit.setEnabled(false);
		submit.addActionListener(this);
		add(submit);
		
		start(count);
		
		setVisible(true);
	}
	
	public void actionPerformed(ActionEvent ae) {
		if (ae.getSource() == next) {
			
			repaint();
			opt1.setEnabled(true);
			opt2.setEnabled(true);
			opt3.setEnabled(true);
			opt4.setEnabled(true);
			
			ans_given = 1;
			
			if(groupOptions.getSelection() == null) {
				user_ans[count] = " ";
			}
			else {
				user_ans[count] = groupOptions.getSelection().getActionCommand();
			}
			
			if(count == len-2) {
				next.setEnabled(false);
				submit.setEnabled(true);
			}
			count++;
			start(count);
		}
		else if(ae.getSource() == lifeline) {
			if(count == 2 || count == 4 || count == 6 || count == 8 || count == 10) {
				opt2.setEnabled(false);
				opt3.setEnabled(false);
			}
			else {
				opt1.setEnabled(false);
				opt4.setEnabled(false);
			}
			lifeline.setEnabled(false);
		}
		else if(ae.getSource() == submit){
			ans_given = 1;
			if(groupOptions.getSelection() == null) {
				user_ans[count] = "";
			}
			else {
				user_ans[count] = groupOptions.getSelection().getActionCommand();
			}
			for(int i=0;i<user_ans.length; i++) {
				if(user_ans[i].equals(answers[i]))
					score += 10;
			}
			setVisible(false);
			new Score(username, score);
			
		}
		
	}
	
	public void paint(Graphics g) {
		super.paint(g);
		String time = "Time left : "+ timer + " seconds";  // 60
		g.setColor(Color.RED);
		g.setFont(new Font("Tahoma", Font.BOLD, 20));
	
		if(timer > 0) {
			g.drawString(time, 1000, 400);
		}
		else {
			g.drawString("Times up!!", 1000, 400);
		}
		timer --;
		
		try {
			Thread.sleep(1000);
			repaint();
		}
		catch(Exception e) {}
		
		if (ans_given == 1) {
			ans_given = 0;
			timer = 60;
		}
		else if (timer < 0) {
			timer = 60;
			opt1.setEnabled(true);
			opt2.setEnabled(true);
			opt3.setEnabled(true);
			opt4.setEnabled(true);
			if(count == len-2) {
				next.setEnabled(false);
				submit.setEnabled(true);
			}
			if(count == len-1) {    //submit
				if(groupOptions.getSelection() == null) {
					user_ans[count] = "";
				}
				else {
					user_ans[count] = groupOptions.getSelection().getActionCommand();
				}
				for(int i=0;i<user_ans.length; i++) {
					if(user_ans[i].equals(answers[i]))
						score += 10;
				}
				setVisible(false);
				new Score(username, score);
			}else {   
				// wait
				//wait
				//wait
				
				if(groupOptions.getSelection() == null) {
					user_ans[count] = "";
				}
				else {
					user_ans[count] = groupOptions.getSelection().getActionCommand();
				}
				count ++;
				start(count);
			}
			if(groupOptions.getSelection() == null) {
				user_ans[count] = "";
			}
			else {
				user_ans[count] = groupOptions.getSelection().getActionCommand();
			}
			count ++;
			start(count);
		}
	}
	public void start(int count) {
		qno.setText(""+ (count + 1) + ". ");
		
		question.setText(questions[count][0]);
		opt1.setText(questions[count][1]);
		opt1.setActionCommand(questions[count][1]);
		
		opt2.setText(questions[count][2]);
		opt2.setActionCommand(questions[count][2]);
		
		opt3.setText(questions[count][3]);
		opt3.setActionCommand(questions[count][3]);
		
		opt4.setText(questions[count][4]);
		opt4.setActionCommand(questions[count][4]);
		
		groupOptions.clearSelection();
		
	}
	public static void main(String[] args) {
		new Quiz("User");
	}

}

/// SCORE


import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
public class Score extends JFrame implements ActionListener {
	int score;
	public Score(String name, int score) {
		this.score = score;
		setBounds(400, 150, 750, 550);
		getContentPane().setBackground(Color.WHITE);
		setLayout(null);
		
		ImageIcon i1 = new ImageIcon("C:\\Users\\HP\\eclipse-workspace\\quizApplication\\src\\quiz\\application\\Screenshot (78).png");
		Image i2 = i1.getImage().getScaledInstance(300, 150, Image.SCALE_DEFAULT);
		JLabel image = new JLabel(i1);
		image.setBounds(30, 150, 500, 200);
		add(image);
		
		JLabel heading = new JLabel("Thankyou "+name+" for playing Techiz");
		heading.setBounds(45, 50, 700, 30);
		heading.setFont(new Font("Kristen ITC" ,Font.BOLD, 32));
		add(heading);
		
		JLabel scores = new JLabel("Your score is "+ score);
		scores.setBounds(550, 200, 300, 30);
		scores.setFont(new Font("Tahoma" ,Font.BOLD, 20));
		add(scores);
		
		JButton play = new JButton("Play Again");
		play.setBounds(560, 270, 120, 30);
		play.setFont(new Font("Tahoma" ,Font.PLAIN, 15));
		play.setBackground(Color.BLACK);
		play.setForeground(Color.WHITE);
		play.addActionListener(this);
		add(play);
		setVisible(true);
		
	}
	public void actionPerformed(ActionEvent ae) {
		setVisible(false);
		new Login();
	}

	public static void main(String[] args) {
		new Score("User", 0);
	}

}


/// reading from file
import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class TextFileTo2DArray {
	public String[][] quizArray;
	public TextFileTo2DArray(String filePath){
		//String filePath = "C:\\Users\\HP\\eclipse-workspace\\quizApplication\\src\\quiz\\application\\quiz.txt"; // Replace with your file path
        List<String[]> quizData = new ArrayList<>();
        List<String> currentQuestion = new ArrayList<>();

        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                if (!line.trim().isEmpty()) {
                    currentQuestion.add(line);
                } else if (!currentQuestion.isEmpty()) {
                    quizData.add(currentQuestion.toArray(new String[0]));
                    currentQuestion.clear();
                }
            }

            if (!currentQuestion.isEmpty()) {
                quizData.add(currentQuestion.toArray(new String[0]));
            }
        } catch (IOException e) {
            System.err.println("Error reading the file: " + e.getMessage());
            return;
        }

        
        quizArray = quizData.toArray(new String[0][]);
	}
	String [][] questions() {
		return quizArray;
	}

    public static void main(String[] args) {
        
    	String filePath = "C:\\Users\\HP\\eclipse-workspace\\quizApplication\\src\\quiz\\application\\quiz.txt"; // Replace with your file path
        List<String[]> quizData = new ArrayList<>();
        List<String> currentQuestion = new ArrayList<>();

        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                if (!line.trim().isEmpty()) {
                    currentQuestion.add(line);
                } else if (!currentQuestion.isEmpty()) {
                    quizData.add(currentQuestion.toArray(new String[0]));
                    currentQuestion.clear();
                }
            }

            if (!currentQuestion.isEmpty()) {
                quizData.add(currentQuestion.toArray(new String[0]));
            }
        } catch (IOException e) {
            System.err.println("Error reading the file: " + e.getMessage());
            return;
        }


        String[][] quizArray = quizData.toArray(new String[0][]);
        
        for (String[] questionData : quizArray) 
            System.out.println(questionData[0]);


            for (int i = 1; i < questionData.length; i++) {
                System.out.println(questionData[i]);
            }
        }

         }
}

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class DataToArrayConverter {
    public static void main(String[] args) {
        // Read data from a file (you can modify this to read from other sources)
    	DataToArrayConverter dac = new DataToArrayConverter();
        String[] lines = dac.readDataFromFile("C:\\Users\\HP\\eclipse-workspace\\quizApplication\\src\\quiz\\application\\answers.txt.txt");

        // Convert data to an array
       // String[] dataArray = lines.toArray(new String[0]);

        // Display the data
        for (String item : lines) {
            System.out.println(item);
        }
    }

    // Read data from a file and return it as a list of strings
    public  String[] readDataFromFile(String fileName) {
        ArrayList<String> lines = new ArrayList<>();

        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            while ((line = br.readLine()) != null) {
                lines.add(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        String[] dataArray = lines.toArray(new String[0]);
        return dataArray;
    }
}



